# Reference: https://data-flair.training/blogs/road-lane-line-detection/
#
# Import libraries
import matplotlib.pyplot as plt
import numpy as np
import cv2
import os
import matplotlib.image as mpimg
from moviepy.editor import VideoFileClip
import math

# Apply frame masking and find region of interest
def interested_region(img, vertices):
    if len(img.shape) > 2:   # Check if the image has multiple channels (color image)
        mask_color_ignore = (255,) * img.shape[2]   # im.shape[0] , [1], [2] are pixel height/width and color channels of an image # set all to while 
    else: 
        maske_color_ignore = 255

    mask = np.zeros_like(img)    # creates a black (0) shape as img
    cv2.fillPoly(mask, vertices, mask_color_ignore)     # fill shape (defined by vertices) with white
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image

# Conversion pixcels to a line in Hough Transform space
def hough_lines(img, rho, theta, threshold, min_line_len, max_line_gap):
    lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength = min_line_len, maxLineGap = max_line_gap)    # detect lines using Hough Transform # https://www.geeksforgeeks.org/hough-transform-in-computer-vision/
    line_img = np.zeros((img.shape[0], img.shape[1], 3), dtype = np.uint8)    # create an empty image to draw lines on (initialized to black)
    lines_drawn(line_img, lines)   # lines_drawn defined later
    return line_img

# Create two lines in each frame after Hough transform
def lines_drawn(img, lines, color=[255, 0, 0], thickness=6):
    global cache
    global first_frame
    slope_l, slope_r = [],[]
    lane_l, lane_r = [],[]
    α = 0.2 

  if lines is not None:
      for line in lines:
          for x1,y1,x2,y2 in line:
              slope = (y2-y1)/(x2-x1)    # Calculate the slope of each line
              if slope > 0.4:    # Classify the lines into left and right based on slope
                  slope_r.append(slope)
                  lane_r.append(line)
              elif slope < -0.4:
                  slope_l.append(slope)
                  lane_l.append(line)
              img.shape[0] = min(y1,y2,img.shape[0])

    if((len(lane_l) == 0) or (len(lane_r) == 0)):
        print ('no lane detected')
        return 1

    slope_mean_l = np.mean(slope_l,axis =0)
    slope_mean_r = np.mean(slope_r,axis =0)
    mean_l = np.mean(np.array(lane_l),axis=0)
    mean_r = np.mean(np.array(lane_r),axis=0)
    
    if ((slope_mean_r == 0) or (slope_mean_l == 0 )):
        print('dividing by zero')
        return 1
    
    x1_l = int((img.shape[0] - mean_l[0][1] - (slope_mean_l * mean_l[0][0]))/slope_mean_l) 
    x2_l = int((img.shape[0] - mean_l[0][1] - (slope_mean_l * mean_l[0][0]))/slope_mean_l)   
    x1_r = int((img.shape[0] - mean_r[0][1] - (slope_mean_r * mean_r[0][0]))/slope_mean_r)
    x2_r = int((img.shape[0] - mean_r[0][1] - (slope_mean_r * mean_r[0][0]))/slope_mean_r)
    
   
    if x1_l > x1_r:
        x1_l = int((x1_l+x1_r)/2)
        x1_r = x1_l
        y1_l = int((slope_mean_l * x1_l ) + mean_l[0][1] - (slope_mean_l * mean_l[0][0]))
        y1_r = int((slope_mean_r * x1_r ) + mean_r[0][1] - (slope_mean_r * mean_r[0][0]))
        y2_l = int((slope_mean_l * x2_l ) + mean_l[0][1] - (slope_mean_l * mean_l[0][0]))
        y2_r = int((slope_mean_r * x2_r ) + mean_r[0][1] - (slope_mean_r * mean_r[0][0]))
    else:
        y1_l = img.shape[0]
        y2_l = img.shape[0]
        y1_r = img.shape[0]
        y2_r = img.shape[0]
      
    present_frame = np.array([x1_l,y1_l,x2_l,y2_l,x1_r,y1_r,x2_r,y2_r],dtype ="float32")
    
    if first_frame == 1:
        next_frame = present_frame        
        first_frame = 0        
    else :
        prev_frame = cache
        next_frame = (1-α)*prev_frame+α*present_frame
             
    cv2.line(img, (int(next_frame[0]), int(next_frame[1])), (int(next_frame[2]),int(next_frame[3])), color, thickness)
    cv2.line(img, (int(next_frame[4]), int(next_frame[5])), (int(next_frame[6]),int(next_frame[7])), color, thickness)
    
    cache = next_frame
