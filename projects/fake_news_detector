
# Reference: https://data-flair.training/blogs/data-science-project-ideas/

# install packages if not exist
# pip install numpy pandas scikit-learn

# Import required packages
import numpy as np
import pandas as pd
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load data
df=pd.read_csv('news.csv')
df.shape
df.head()

# Split data into training & test subsets
x_train, x_test, y_train, y_test=train_test_split(df['text'], df['label'], test_size=0.2, random_state=7) # x=df['text'], y=labels; train + test

# Initialize the TF-IDF vectorizer with stop words removal and max_df filter
tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)

# Fit and transform train set (create a numerical representation of the input text data, where each row represents a document and each
# column represents a term), then transform test set
tfidf_train=tfidf_vectorizer.fit_transform(x_train) 
tfidf_test=tfidf_vectorizer.transform(x_test)

# Initialize a PassiveAggressiveClassifier (a learning algorithm used for binary classification tasks)
pac=PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train) # model learns the relationship between the text features and their corresponding labels

# Predict on the test set and calculate accuracy
y_pred=pac.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
print(f'Accuracy: {round(score*100,2)}%') # f is used to show values associated with embeded expression {round(score*100,2)}

# Build confusion matrix, a detailed table of how the model is performing across the different classes, allows for visualizing the 
# counts of true positives, true negatives, false positives, and false negatives, which can be used to derive other important metrics 
# such as precision, recall, and F1-score.
confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])


# Extended reading
https://martin-thoma.com/comparing-classifiers/
