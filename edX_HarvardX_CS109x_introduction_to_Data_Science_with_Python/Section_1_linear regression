1.1 Introduction to Regression
# important concepts:
  X/predictors/features/covariates; 
  Y/outcome/response variable/dependent variable

# pandas: X.shape/ df[[''X'']]/ df['X']; data.frame vs. series

# kNN regression

# exercise 1.1:
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline

data_filename = 'Advertising.csv'
df = pd.read_csv(data_filename)
df.head
plt.scatter(df['TV'], df['Sales'], color='blue', alpha=0.7)
plt.xlabel('TV budget')
plt.ylabel('Sales')
plt.title('TV budget vs Sales')

1.2 Error Evaluation and Model Comparison
# definition of better/best
# error -> error aggregation -> loss/cost function -> MSE (average of the square of residules)

# exercise 1.2:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split
%matplotlib inline

filename = 'Advertising.csv'
df_adv = pd.read_csv(filename)
df_adv.head()

# P1:
x_true = df_adv.TV.iloc[5:13]
y_true = df_adv.Sales.iloc[5:13]

idx = np.argsort(x_true)
x_true  = x_true.iloc[idx].values
y_true  = y_true.iloc[idx].values

def find_nearest(array,value):
    idx = pd.Series(np.abs(array-value)).idxmin()
    return idx, array[idx]

x = np.linspace(np.min(x_true), np.max(x_true))
y = np.zeros((len(x)))

for i, xi in enumerate(x):
    y[i] = y_true[find_nearest(x_true, xi )[0]]

plt.plot(x, y, '-.')
plt.plot(x_true, y_true, 'kx')
plt.title('TV vs Sales')
plt.xlabel('TV budget in $1000')
plt.ylabel('Sales in $1000')

#P2:
data_filename = 'Advertising.csv'
df = pd.read_csv(data_filename)

x = df[['TV']].values
y = df['Sales'].values

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.6,random_state=42)

k_value_min = 1
k_value_max = 70
k_list = np.linspace(k_value_min, k_value_max, 70)

fig, ax = plt.subplots(figsize=(10,6))
j=0

for k_value in k_list:   
    model = KNeighborsRegressor(n_neighbors=int(k_value))
    model.fit(x_train,y_train)
    y_pred = model.predict(x_test)
    colors = ['grey','r','b']
    if k_value in [1,10,70]:
        xvals = np.linspace(x.min(),x.max(),100).reshape(-1,1)
        ypreds = model.predict(xvals)
        ax.plot(xvals, ypreds,'-',label = f'k = {int(k_value)}',linewidth=j+2,color = colors[j])
        j+=1
        
ax.legend(loc='lower right',fontsize=20)
ax.plot(x_train, y_train,'x',label='train',color='k')
ax.set_xlabel('TV budget in $1000',fontsize=20)
ax.set_ylabel('Sales in $1000',fontsize=20)
plt.tight_layout()
