### 05-relational-databases ###
SELECT city
FROM Cities

SELECT city
FROM Cities
WHERE country = 'Ireland'

SELECT Airports.name,
  Cities.city, Cities.country
FROM Airports
  INNER JOIN Cities ON Airports.city_id = Cities.id

SELECT Airports.name,
  Cities.city, Cities.country
FROM Airports
  INNER JOIN Cities ON Airports.city_id = Cities.id
WHERE Cities.city = 'London'

### 07-python ###
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (10,3)

base_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/" # loading from Internet
# base_url = "Y:/Data_Science_For_Beginners/07_python/"

infected_dataset_url = base_url + "time_series_covid19_confirmed_global.csv"
recovered_dataset_url = base_url + "time_series_covid19_recovered_global.csv"
deaths_dataset_url = base_url + "time_series_covid19_deaths_global.csv"
countries_dataset_url = base_url + "../UID_ISO_FIPS_LookUp_Table.csv"

infected = pd.read_csv(infected_dataset_url)
recovered = pd.read_csv(recovered_dataset_url)
deaths = pd.read_csv(deaths_dataset_url)

infected = infected.groupby('Country/Region').sum()
recovered = recovered.groupby('Country/Region').sum()
deaths = deaths.groupby('Country/Region').sum()

infected.loc['China'][2:].plot()
recovered.loc['China'][2:].plot()
plt.show()

infected.drop(columns=['Lat','Long','Province/State'],inplace=True)
recovered.drop(columns=['Lat','Long','Province/State'],inplace=True)
deaths.drop(columns=['Lat','Long','Province/State'],inplace=True)

# See the spread of the pandemic in different countries.
def mkframe(country):
    df = pd.DataFrame({ 'infected' : infected.loc[country] ,
                        'recovered' : recovered.loc[country],
                        'deaths' : deaths.loc[country]})
    df.index = pd.to_datetime(df.index)
    return df

df = mkframe('China')
df
df.plot()
plt.show()

# Plot Rt graphs for several countries on one plot for comparison, or make several plots side-by-side
df = mkframe('US')
df['ninfected'] = df['infected'].diff()
df['Rt'] = df['ninfected'].rolling(8).apply(lambda x: x[4:].sum()/x[:4].sum())

df2 = mkframe('China')
df2['ninfected'] = df2['infected'].diff()
df2['Rt'] = df2['ninfected'].rolling(8).apply(lambda x: x[4:].sum()/x[:4].sum())

df['Rt'].plot()
df2['Rt'].plot()
plt.show()

# See how the number of deaths and recoveries correlate with number of infected cases.
df['deaths'].plot()
df['ninfected'].plot()
plt.show()

# Try to find out how long a typical disease lasts by visually correlating infection rate and deaths rate and looking for some anomalies. You may need to look at different countries to find that out.
df['ndeaths'] = df['deaths'].diff()
df['Rd'] = df['ndeaths'].rolling(8).apply(lambda x: x[4:].sum()/x[:4].sum())
df['deaths'].plot()
df['Rt'].plot()
plt.show()

# Calculate the fatality rate and how it changes over time. You may want to take into account the length of the disease in days to shift one time series before doing calculations
df['ndeaths_rol'] = df['ndeaths'].rolling(7).mean()
df['ndeaths_shift'] = df['ndeaths_rol'].shift(10)
df['ninfected_rol'] = df['ninfected'].rolling(7).mean()
df['FTR'] = df['ndeaths_shift'] / df['ninfected_rol']
df['FTR'].plot()
plt.show()

## Analyzing COVID-19 papers
# Build co-occurrence matrix of different medications, and see which medications often occur together (i.e. mentioned in one abstract). You can modify the code for building co-occurrence matrix for medications and diagnoses.
m = np.zeros((len(medications),len(medications)))
for a in df['abstract']:
    x = str(a).lower()
    for i,m1 in enumerate(medications):
        if ' '+m1 in x:
            for j,m2 in enumerate(medications):
                if ' '+m2 in x:
                    m[j,i] += 1
m

# Visualize this matrix using heatmap.
plt.imshow(m,interpolation='nearest',cmap='hot')
ax = plt.gca()
ax.set_yticks(range(len(medications))) 
ax.set_yticklabels(medications)
ax.set_xticks(range(len(medications)))
ax.set_xticklabels(medications,rotation=90)
plt.show()

# As a stretch goal, you may want to visualize the co-occurrence of medications using chord diagram. This library may help you draw a chord diagram.
import numpy as np
import holoviews as hv
hv.extension('bokeh')

dataset = hv.Dataset((medications, medications, m), ['x', 'y'], 'value')
chord = hv.Chord(dataset)

chord.opts(
    opts.Chord(
        node_color='index', 
        edge_color='source', 
        labels='index', 
        cmap='Category20'
    )
)

hv.render(chord)
# to be troubleshooted...

# As another stretch goal, try to extract dosages of different medications (such as 400mg in take 400mg of chloroquine daily) using regular expressions, and build dataframe that shows different dosages for different medications. Note: consider numeric values that are in close textual vicinity of the medicine name.
# to be finished...
